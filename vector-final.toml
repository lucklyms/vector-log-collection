# Vector 統一日誌收集配置 - 最終版本

[api]
  enabled = true
  address = "0.0.0.0:8686"

# ==================== 數據源 ====================

# HTTP 接收
[sources.http_logs]
  type = "http_server"
  address = "0.0.0.0:8080"
  decoding.codec = "json"

# Syslog UDP
[sources.syslog_udp]
  type = "syslog"
  mode = "udp"
  address = "0.0.0.0:5514"

# Syslog TCP
[sources.syslog_tcp]
  type = "syslog"
  mode = "tcp"
  address = "0.0.0.0:5601"

# IIS 日誌文件
[sources.iis_logs]
  type = "file"
  include = ["/iis-logs/**/*.log"]
  read_from = "beginning"

# Apache 日誌
[sources.apache_logs]
  type = "file"
  include = ["/apache-logs/**/*.log"]
  read_from = "beginning"

# 應用日誌
[sources.app_logs]
  type = "file"
  include = ["/app-logs/**/*.log"]
  read_from = "beginning"

# ==================== 日誌轉換 ====================

# HTTP 日誌（自動提取來源 IP）
[transforms.tag_http]
  type = "remap"
  inputs = ["http_logs"]
  source = '''
    .log_type = "http"
    .collected_at = now()

    # HTTP server 會在 metadata 中提供來源 IP
    # 先保留，之後從連線資訊中提取
  '''

# Syslog
[transforms.tag_syslog]
  type = "remap"
  inputs = ["syslog_udp", "syslog_tcp"]
  source = '''
    .log_type = "syslog"
    .collected_at = now()
  '''

# 文件日誌
[transforms.tag_files]
  type = "remap"
  inputs = ["iis_logs", "apache_logs", "app_logs"]
  source = '''
    .log_type = "file"
    .collected_at = now()
  '''

# ==================== 輸出 ====================

# 重新整理日誌格式
[transforms.format_logs]
  type = "remap"
  inputs = ["tag_http", "tag_syslog", "tag_files"]
  source = '''
    .source_ip = .agent_ip || .agent_hostname || .host || "unknown"

    # 處理時間戳
    ts = .timestamp
    if is_timestamp(ts) {
      .log_time = format_timestamp!(ts, format: "%Y-%m-%d %H:%M:%S")
    } else if is_string(ts) {
      # 嘗試解析字串為 timestamp 再格式化
      parsed = parse_timestamp(ts, format: "%+") ?? null
      if parsed != null {
        .log_time = format_timestamp!(parsed, format: "%Y-%m-%d %H:%M:%S")
      } else {
        .log_time = ts
      }
    } else {
      .log_time = to_string!(ts)
    }

    # 安全處理 message 欄位
    if exists(.message) {
      .log_message = to_string!(.message)
      # 移除原始 message 避免冗余
      del(.message)
    } else {
      .log_message = ""
    }

    .original_timestamp = .timestamp
  '''

[sinks.console]
  type = "console"
  inputs = ["format_logs"]
  encoding.codec = "json"

[sinks.file_output]
  type = "file"
  inputs = ["format_logs"]
  path = "/var/log/vector/unified-%Y-%m-%d.log"
  encoding.codec = "json"
